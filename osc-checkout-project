#!/usr/bin/env bash

# Experimenting with comparing revisions instead of running osc up.
# If revisions are out of sync, then osc up would run. Running a
# raw HTTP API call is about 0.8s vs about 1.3s to do an osc up
# when no change has been made remotely.
#
# osc api -m GET /source/Moblin:Factory/gssdp/_history | xpath "/revisionlist/revision[last()]/@rev=4 and /revisionlist/revision[last()]/@vrev=1 and /revisionlist/revision[last()]/srcmd5='e87a06b0287a1637ab28c055b880c4f5'"
#

function contains {
	target=$1; shift
	for __pkg in $@; do
		if [[ $__pkg = $target ]]; then
			return 0
		fi
	done
	return 1
}

function __osc {
	osc -A "${OBS_API_URL-https://api.opensuse.org}" $@
}

function checkout_or_update {
	local prj_pac="$1/$2"
	local ok=0

	# Forcefully try to check out/update a package until
	# an osc up or co actually succeeds. This is necessary
	# since often OBS will completely time out and will
	# 'freeze' for minutes at a time
	while test $ok -eq 0; do
		if osc -A "$api" status "$prj_pac" &>/dev/null; then
			# Here we have a valid/uncorrupt checkout, so see
			# if any changes have been made and remove them to
			# ensure there will be no update conflict or invalid
			# analysis - these trees should never be modified
			pushd "$prj_pac" &>/dev/null
			osc -A "$api" status | awk '{print$2}' | xargs rm -rf
			osc -A "$api" up && ok=1
			popd &>/dev/null
		else
			# Here something is wrong with the checkout itself,
			# perhaps a previous osc run timed out and left
			# invalid data (e.g. no .osc directory), or the
			# package just has never been checked out, so
			# remove it and try a fresh checkout
			rm -rf "$prj_pac"
			osc -A "$api" co -u "$prj_pac" && ok=1
		fi
	done
}

set -e

api="https://api.opensuse.org"
if test "$1" = "-A"; then
	api="$2"
	shift; shift
fi
project="$1"

echo "Getting package list for $project..."
PACKAGES="$(osc -A "$api" list "$project")"

echo "Updating project checkout..."
for package in $PACKAGES; do
	echo "==> $package"
	checkout_or_update "$project" "$package"
done

# We must take care to remove any obsolete/old packages that
# might exist locally and are not longer in the remote project
# since this is only done when running osc up for the project
echo "Removing obsolete packages..."
for package in $(find "$project" -maxdepth 1 -mindepth 1 -type d \
	| cut -f2 -d\/ | grep -v .osc); do
	if ! contains "$package" $PACKAGES; then
		echo "==> $package"
		test -d "$project/$package" && \
			rm -rf -- "$project/$package"
	fi
done

# We must generate the local _package listing since it's
# only created when osc up is run on the whole project.
# The analysis tool uses the project's _packages file to
# know which packages to analyze.
echo "Generating project _packages file..."
{
echo "<project name=\"$(cat $project/.osc/_project)\">"
for package in $PACKAGES; do
	echo "  <package name=\"$(cat $project/$package/.osc/_package)\" state=\" \"/>"
done
echo "</project>"
} > $project/.osc/_packages

echo "Done."
