<#@ template language="C#v3.5" hostspecific="true" #>
<#@ assembly name="ObsTreeAnalyzer" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="ObsTreeAnalyzer" #>
<#
    Func<string, string> to_css_id = s => Regex.Replace (s, @"[^\w]", String.Empty);

    var project = new ObsProjectNode () {
        BasePath = Host.ResolveParameterValue (null, null, "obs-project-path")
    };

    project.Load ();

    var requests = (
        from request in project.Requests
        where request.Action.Type == "submit" && request.State.Name == "new"
        orderby request.State.When descending
        select request).ToList ();
    var show_request_source_package = false;
    foreach (var request in requests) {
        if (request.Action.Target.Package != request.Action.Source.Package) {
            show_request_source_package = true;
            break;
        }
    }

    var linked_packages = (
        from package in project.Packages
        where package.Link != null
        orderby
            package.Link.ModificationCount descending,
            package.Link.TargetProjectName,
            package.Name
        select package).ToList ();

    var owned_packages = (
        from package in project.Packages
        where package.Link == null
        orderby
            package.UnappliedPatchFiles.Count descending,
            package.AppliedPatchFiles.Count descending,
            package.Name
        select package).ToList ();
#>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<title>OBS Report for <#= project.Name #></title>
<style type="text/css">
<#@ include file="style.css" #>
</style>
<script type="text/javascript">
<#@ include file="jquery-1.3.2.min.js" #>
<#@ include file="jquery.tablesorter.mod.js" #>
<#@ include file="jquery.tablesorter.collapsible.js" #>
<#@ include file="report.js" #>
</script>
</head>
<body>
  <h1>OBS Report for <#= project.Name #></h1>
  <p>Generated at <#= DateTime.Now #>. <#= project.Packages.Count #> total packages.</p>

<# if (requests.Count > 0) { #>
  <h2>Requests (<#= requests.Count #>)</h2>
  <p><a href="#toggle-all-requests" id="toggle-all-requests">Toggle All</a></p>
  <table class="grid tablesorter" id="requests" cellspacing="0">
  <thead>
    <tr>
      <th></th>
      <th>ID</th>
      <th>Package</th>
      <th>Source Project</th>
      <# if (show_request_source_package) { #><th>Source Package</th><# } #>
      <th>Who</th>
      <th>When</th>
    </tr>
  </thead>
  <tbody>
<#
    foreach (var request in requests) {
#>
    <tr class="package collapsible">
      <td class="collapse-column collapsible" rowspan="2"></td>
      <td><#= request.ID #></td>
      <td><#= request.Action.Target.Package #></td>
      <td><#= request.Action.Source.Project #></td>
      <# if (show_request_source_package) { #><td><#= request.Action.Source.Package #></td><# } #>
      <td><#= request.State.Who #></td>
      <td><#= request.State.When.ToString ("yyyy-MM-dd HH:mm") #></td>
    </tr>
    <tr class="expand-child">
      <td colspan="<# if (show_request_source_package) { #>6<# } else { #>5<# } #>">
        <div class="request-details">
          <#= Regex.Replace (
                request.Description,
                @"(#|bnc\s*#?|bmo\s*#?|bgo\s*#?)\s*([0-9]{4,8})", match => {
                    string bugzilla_url = null;
                    switch (match.Groups[1].Value.Trim (new [] { '#', ' ', '\t', '\n', '\r' }).ToLower ()) {
                        case "bgo": bugzilla_url = "https://bugzilla.gnome.org/show_bug.cgi?id="; break;
                        case "bmo": bugzilla_url = "https://bugzilla.moblin.org/show_bug.cgi?id="; break;
                        case "bnc":
                        default:    bugzilla_url = "https://bugzilla.novell.com/show_bug.cgi?id="; break;
                    }
                    return String.Format ("<a href=\"{0}{1}\">{2}</a>", bugzilla_url, match.Groups[2].Value, match.Value);
                }, RegexOptions.IgnoreCase) #>
        </div>
      </td>
    </tr>
<# } #>
  </tbody>
  </table>
<# } #>

  <h2>Linked Packages (<#= linked_packages.Count #>)</h2>
  <p><a href="#toggle-all-links" id="toggle-all-links">Toggle All</a></p>
  <table class="grid tablesorter" id="linked-packages" cellspacing="0">
  <thead>
    <tr>
      <th></th>
      <th>Package</th>
      <th>Target Project</th>
      <th>&#120491;</th>
      <th>Special</th>
    </tr>
  </thead>
  <tbody>
<#
    foreach (var package in linked_packages) {
        var applied_patches = (
            from patch in package.PatchFiles
            where patch.ApplicationIndex >= 0
            select patch).ToList ();

        var added_files = (
            from file in package.AllFiles
            where !(file is PatchFileNode) || ((PatchFileNode)file).ApplicationIndex < 0
            select file).ToList ();

        var deleted_files = package.Link.DeletedFiles;

        var warnings = new List<string> ();
        var special_summary = new List<string> ();

        if (package.Link.TargetPackageName != null) special_summary.Add ("Target");
        if (package.Link.CommitCountAction != null) special_summary.Add ("Cicount");
        if (package.Link.TargetBaseRevision != null) special_summary.Add ("Base Revision");
        if (package.Link.TargetPackageName == null && package.Link.TargetProjectName == package.Project.Name) {
            special_summary.Add ("Circular");
            warnings.Add ("This package links to itself (circular link)");
        }

        var has_metadata = special_summary.Count > 0;
        var has_modifications = package.Link.ModificationCount > 0;
        var collapsible =
            warnings.Count > 0 ||
            has_metadata ||
            has_modifications;
#>
    <tr class="package<# if (collapsible) { #> collapsible<# } if (warnings.Count > 0) { #> warning<# } #>">
      <td class="collapse-column<# if (collapsible) { #> collapsible<# } #>" rowspan="2"></td>
      <td><#= package.Name #></td>
      <td><#= package.Link.TargetProjectName #></td>
      <td><#= package.Link.ModificationCount == 0 ? null : package.Link.ModificationCount.ToString () #></td>
      <td><#= has_metadata ? String.Join (", ", special_summary.ToArray ()) : null #></td>
    </tr>
    <tr class="expand-child">
      <# if (collapsible) { #>
      <td colspan="4">
        <# if (warnings.Count > 0) { #>
        <table class="details">
          <tr>
            <th>Warnings</th>
          </tr>
          <tr>
            <td>
              <ul>
              <# foreach (var warning in warnings) { #><li><#= warning #></li><# } #>
              </ul>
            </td>
          </tr>
        </table>
        <# } #>
        <# if (has_modifications) { #>
        <table class="details">
          <tr>
            <# if (applied_patches.Count > 0) { #><th>Applied Patches</th><# } #>
            <# if (added_files.Count > 0) { #><th>Added Files</th><# } #>
            <# if (deleted_files.Count > 0) { #><th>Deleted Target Files</th><# } #>
          </tr>
          <tr>
          <# foreach (var file_set in new System.Collections.IList [] { applied_patches, added_files, deleted_files }) { #>
            <# if (file_set.Count > 0) { #>
            <td>
              <ul>
              <# foreach (var file in file_set) { #>
                <li><a href="<#= ((Node)file).BasePath #>"><#= ((Node)file).Name #></a></li>
              <# } #>
              </ul>
            </td>
            <# } #>
          <# } #>
          </tr>
        </table>
        <# } #>
        <# if (has_metadata) { #>
        <table class="details">
        <# if (package.Link.TargetBaseRevision != null) { #>
          <tr>
          <th>Target Base Revision</th>
          <td><code><#= package.Link.TargetBaseRevision #></code></td>
          </tr>
        <# } #>
        <# if (package.Link.TargetPackageName != null) { #>
          <tr>
          <th>Target Package</th>
          <td><#= package.Link.TargetPackageName #></td>
          </tr>
        <# } #>
        <# if (package.Link.CommitCountAction != null) { #>
          <tr>
          <th>Commit Count</th>
          <td><#= package.Link.CommitCountAction #></td>
          </tr>
        <# } #>
        </table>
      <# } #>
      </td>
      <# } #>
    </tr>
<# } #>
  </tbody>
  </table>

  <h2>Owned Packages (<#= owned_packages.Count #>)</h2>
  <p><a href="#toggle-all-owned" id="toggle-all-owned">Toggle All</a></p>
  <table class="grid tablesorter" id="owned-packages" cellspacing="0">
  <thead>
    <tr>
      <td colspan="3">&nbsp;</td>
      <td colspan="3" style="text-align: center; font-style: italic">Patches</td>
    </tr>
    <tr>
      <th class="collapse-column"></th>
      <th>Package</th>
      <th>Version</th>
      <th>Total</th>
      <th>Unapplied</th>
      <th>Applied</th>
    </tr>
  </thead>
  <tbody>
<#
    foreach (var package in owned_packages) {
#>
    <tr class="package collapsible">
      <td class="collapsible collapse-column" rowspan="2"></td>
      <td><#= package.Name #></td>
      <td><#= package.SpecFiles[0].Version #></td>
      <td><#= package.PatchFiles.Count #></td>
      <td><#= package.UnappliedPatchFiles.Count #></td>
      <td><#= package.AppliedPatchFiles.Count #></td>
    </tr>
    <tr class="expand-child">
      <td colspan="5">
        <table class="details">
          <tr>
            <# if (package.UnappliedPatchFiles.Count > 0) { #><th>Unapplied Patches</th><# } #>
            <# if (package.AppliedPatchFiles.Count > 0) { #><th>Applied Patches</th><# } #>
          </tr>
          <tr>
          <# foreach (var file_set in new System.Collections.IList [] {
                package.UnappliedPatchFiles,
                package.AppliedPatchFiles }) { #>
            <# if (file_set.Count > 0) { #>
            <td>
              <ul>
              <# foreach (var file in file_set) { #>
                <li><a href="<#= ((Node)file).BasePath #>"><#= ((Node)file).Name #></a></li>
              <# } #>
              </ul>
            </td>
            <# } #>
          <# } #>
          </tr>
        </table>
      </td>
    </tr>
<# } #>
  </tbody>
  </table>
</body>
</html>
